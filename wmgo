#!/bin/bash
# wmgo - Launcher for EWMH window managers
# based on Dmenu Launcher by Scott Garret

# We need a display
#if [[ -z "$DISPLAY" ]]; then
#    exit 1
#fi

# XDG standard paths.
if [ '!' -d "$XDG_CACHE_HOME" ]; then
	XDG_CACHE_HOME="$HOME/.cache"
fi

if [ '!' -d "$XDG_CONFIG_HOME" ]; then
	XDG_CONFIG_HOME="$HOME/.config"
fi

if [ '!' -d "$XDG_DATA_HOME" ]; then
	XDG_DATA_HOME="$HOME/.local/share"
fi

if [ -z "$XDG_DATA_DIRS" ]; then
	XDG_DATA_DIRS="/usr/share:/usr/local/share"
fi

# Path to Dmenu Launcher cache will be stored.
cache="$XDG_CACHE_HOME/wmgo.cache"

# Path to history file.
hist="$XDG_CACHE_HOME/wmgo.history"

# Path to config
conf="$XDG_CONFIG_HOME/wmgo/config"

# Source config file if exists
if [ -f $conf ]; then
	source $conf
fi

# Set terminal if unset
if [[ -z "$TERMCMD" ]]; then
	TERMCMD="xterm -e"
fi

# Dmenu command.
dm="dmenu -i $DMENU_OPTIONS"

# Choose proper LSX binary.
if which 'lsx-suckless' &> /dev/null; then
    lsx=lsx-suckless
else
    lsx=lsx
fi

function get-open-windows {
	wmctrl -l | cut -d' ' -f5-
}

function raise-window {
	wmctrl -a "$@"
}

function get-applications {
    # Create cache directory if it doesn't exist.
    mkdir -p "${cache%/*}"
    # Cache names and executable paths of XDG shortcuts.
    xdg_paths=$(echo "$XDG_DATA_DIRS:$XDG_DATA_HOME" | sed 's/:/ /g')
    for path in $xdg_paths; do
        for file in $(printf '%s/applications/*.desktop\n' "$path"); do
            # Grab the friendly name and path of the executable.
            # (Thanks, <geirha@freenode/#awk>.)
            awk -F'=' '$1 == "Name" {sub(/Name=/, "", $0); name=$0}
                       $1 == "Exec" {sub(/Exec=/, "", $0); exec=$0}
                       END { print name "|" exec }' "$file" 2> /dev/null
        done
    done > "$cache"
    # Start printing out the menu items, starting with XDG 
	# shortcut names...
    sed 's/|.*$//' "$cache" | sort -u
    # ...then, the binary names...
    (IFS=':'; $lsx $PATH | sort -u)
}

function cache-menu {
    get-applications > "${cache}-menu.new"
    mv "${cache}-menu"{.new,}
}

function update-history () {
    (echo "$1"; head -9 "$hist" | grep -Fvx "$1") > "$hist.new"
    mv "$hist"{.new,}
}

build_hist_menu () {
    mkdir -p "${hist%/*}"
    touch "$hist"
    menu_items=$(build_menu)
    hist_items=$(grep -Fx "$(echo "$menu_items")" "$hist")
    echo "$hist_items" > "$hist" # Keep the history file free of invalids.

    # There's probably a better way, but this works, for now.
    if [[ ${#hist_items} > 1 ]]; then
        echo "$hist_items"
        echo "$menu_items" | grep -Fvx "$hist_items"
    else
        echo "$menu_items"
    fi
}

cmd-exists () {
    which "$1" &> /dev/null
}

launch () {
	if [[ $1 == "1" ]]; then
		echo "YAY: ${@:2}"
		$TERMCMD "${@:2} && echo 'Press any key to close...' && read"
	else
		# Shouldn't be set when there won't be a terminal attached anymore...
    	# ...and won't be interactive...
    	export TERM='dumb'
    	unset PS1
    	"${@:2}" </dev/null &>/dev/null & disown
	fi
}

# Cache menu in background
cache-menu &

# If cache exists use cache, else build cache
if [[ ! -f "${cache}-menu" ]]; then
	apps="$(get-applications)"
else
    apps=`cat "${cache}-menu"`
fi
wins="$(get-open-windows)"
if [[ -z "$FONT" ]]; then
	cmd=$(echo -e "$wins\n$apps" | $dm -p "!")
else 
	cmd=$(echo -e "$wins\n$apps" | $dm -fn "$FONT" -p "!")
fi

# If nothing is selected -- exit
[[ -z $cmd ]] && exit

if [[ $wins == *$cmd* ]]; then
	raise-window "$cmd" && exit
fi

interm=0
if [[ "${cmd: -1}" == ";" ]]; then
	cmd="${cmd%?}"
	interm=1
fi

# If the selection doesn't exist, see if it's an XDG shortcut.
if ! cmd-exists $cmd; then
	cmd=$(grep -F "$cmd|" "$cache" | sed 's/.*|//;s/ %.//g')
    # If there's more than one, ask which binary to use.
    [[ "$(echo "$cmd" | wc -l)" != '1' ]] &&
    cmd=$(echo "$cmd" | $dm -p 'Which one?')
    [[ -z "$cmd" ]] && exit
fi

if cmd-exists $cmd; then
	launch $interm $cmd
fi
